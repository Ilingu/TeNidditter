{
	"success": true,
	"code": 200,
	"data": {
		"info": { "after": "t3_z4mkf8", "before": "t3_ylb6f4" },
		"links": [
			{
				"author": "jerf",
				"created": 1667501560,
				"domain": "self.golang",
				"duration": null,
				"id": "ylb6f4",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 40,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/ylb6f4/whos_hiring_november_2022/",
				"score": 55,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>This post will be stickied at the top of <a href=\"https://www.reddit.com/r/golang/\">r/golang</a> until the last week of November (more or less).</p>\n\n<p>Please adhere to the following rules when posting:</p>\n\n<p><strong>Rules for individuals:</strong></p>\n\n<ul>\n<li>Don&#39;t create top-level comments; those are for employers.</li>\n<li>Feel free to reply to top-level comments with on-topic questions.</li>\n<li>Meta-discussion should be reserved for the distinguished mod comment.</li>\n</ul>\n\n<p><strong>Rules for employers:</strong></p>\n\n<ul>\n<li>To make a top-level comment you must be hiring directly, or a focused third party recruiter with specific jobs in hand. No recruiter fishing for contacts please.</li>\n<li>The job must involve working with Go on a regular basis, even if not 100% of the time.</li>\n<li>One top-level comment per employer. If you have multiple job openings, please consolidate their descriptions or mention them in replies to your own top-level comment.</li>\n<li>Please base your comment on the following template:</li>\n</ul>\n\n<p><strong>COMPANY:</strong> <em>[Company name; ideally link to your company&#39;s website or careers page.]</em></p>\n\n<p><strong>TYPE:</strong> <em>[Full time, part time, internship, contract, etc.]</em></p>\n\n<p><strong>DESCRIPTION:</strong> <em>[What does your team/company do, and what are you using Go for? How much experience are you seeking and what seniority levels are you hiring for? The more details the better.]</em></p>\n\n<p><strong>LOCATION:</strong> <em>[Where are your office or offices located? If your workplace language isn&#39;t English-speaking, please specify it.]</em></p>\n\n<p><strong>ESTIMATED COMPENSATION:</strong> <em>[Please attempt to provide at least a rough expectation of wages/salary.If you can&#39;t state a number for compensation, omit this field. Do not just say &quot;competitive&quot;. Everyone says their compensation is &quot;competitive&quot;.If you are listing several positions in the &quot;Description&quot; field above, then feel free to include this information inline above, and put &quot;See above&quot; in this field.If compensation is expected to be offset by other benefits, then please include that information here as well.]</em></p>\n\n<p><strong>REMOTE:</strong> <em>[Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]</em></p>\n\n<p><strong>VISA:</strong> <em>[Does your company sponsor visas?]</em></p>\n\n<p><strong>CONTACT:</strong> <em>[How can someone get in touch with you?]</em></p>\n</div><!-- SC_ON -->",
				"stickied": true,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Who's Hiring? - November 2022",
				"ups": 55,
				"upvote_ratio": 0.97,
				"url": "https://teddit.net/r/golang/comments/ylb6f4/whos_hiring_november_2022/",
				"user_flair": ""
			},
			{
				"author": "anthdmx",
				"created": 1669477547,
				"domain": "youtube.com",
				"duration": null,
				"id": "z5aih8",
				"images": {
					"preview": null,
					"thumb": "https://teddit.net/pics/thumbs/thumb_w:108_wsdlQE0jSEBuNTvcqrSBZBpm2Ie-GCL3RWHOio6oPpA.jpg"
				},
				"is_self_link": false,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": {
					"oembed": {
						"author_name": "anthonygg",
						"author_url": "https://www.youtube.com/@anthonygg_",
						"height": 200,
						"html": "<iframe width=\"356\" height=\"200\" src=\"https://www.youtube.com/embed/mqH21m0MsWk?feature=oembed&enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Everything You Need To Know About Pointers In Golang\"></iframe>",
						"provider_name": "YouTube",
						"provider_url": "https://www.youtube.com/",
						"thumbnail_height": 360,
						"thumbnail_url": "https://i.ytimg.com/vi/mqH21m0MsWk/hqdefault.jpg",
						"thumbnail_width": 480,
						"title": "Everything You Need To Know About Pointers In Golang",
						"type": "video",
						"version": "1.0",
						"width": 356
					},
					"type": "youtube.com"
				},
				"num_comments": 7,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5aih8/everything_a_beginner_should_know_about_pointers/",
				"score": 38,
				"selftext_html": null,
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Everything a beginner should know about pointers in Golang",
				"ups": 38,
				"upvote_ratio": 0.82,
				"url": "https://www.youtube.com/watch?v=mqH21m0MsWk",
				"user_flair": ""
			},
			{
				"author": "f_e_t_s",
				"created": 1669475510,
				"domain": "self.golang",
				"duration": null,
				"id": "z59qvb",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">discussion</span>",
				"link_flair_text": "discussion",
				"locked": false,
				"media": null,
				"num_comments": 4,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z59qvb/the_balancer_for_incoming_http_requests/",
				"score": 9,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hi guys!  </p>\n\n<p>I hope you are feeling very well!)</p>\n\n<p>Today, I finished my first release VBalancer <a href=\"https://github.com/microup/vbalancer\">https://github.com/microup/vbalancer</a>  - this project created for switch traffic between peers, and it uses Robin Round algorithm.</p>\n\n<p>What do you think about my code?</p>\n\n<p>Thanks for your opinions!  </p>\n\n<p>BR,<br/>\nmicroup</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "The balancer for incoming HTTP requests",
				"ups": 9,
				"upvote_ratio": 0.76,
				"url": "https://teddit.net/r/golang/comments/z59qvb/the_balancer_for_incoming_http_requests/",
				"user_flair": ""
			},
			{
				"author": "ok_pennywise",
				"created": 1669482608,
				"domain": "self.golang",
				"duration": null,
				"id": "z5cgyn",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">help</span>",
				"link_flair_text": "help",
				"locked": false,
				"media": null,
				"num_comments": 12,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5cgyn/how_to_authenticate_microservices/",
				"score": 7,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>How to authenticate microservices?</p>\n\n<p>Suppose I have a Django backend in which the user logs in and get an encrypted jwt in return. The token has the unique user id in it. Now suppose I have a microservice written in go which requires the user to be logged in. Now my question is how do I decrypt the token and get the user id?</p>\n\n<p>Do I need to duplicate all the code written in Python that is used to generate, encrypt and decrypt the token in Go? Where do I keep my secret keys? Do I need to duplicate my secret key and keep one copy in the go server? What if the user changes his password? How does the go server know that the token is invalid since the microservice will not have any access to the database? What are my options? How does all these things work?</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "How to authenticate microservices?",
				"ups": 7,
				"upvote_ratio": 0.82,
				"url": "https://teddit.net/r/golang/comments/z5cgyn/how_to_authenticate_microservices/",
				"user_flair": ""
			},
			{
				"author": "django_kid",
				"created": 1669439056,
				"domain": "self.golang",
				"duration": null,
				"id": "z4yoin",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">help</span>",
				"link_flair_text": "help",
				"locked": false,
				"media": null,
				"num_comments": 25,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4yoin/any_resources_on_building_a_simple_web_app_with/",
				"score": 43,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I know how to write one, but I need a guide to share with my community which has many people who want to learn. Unfortunately I am not able to find a good guide / tutorial which shows how to write a simple web app, using the best practices, structuring, connecting to DB and not use any web framework. </p>\n\n<p>Django has a great tutorial on building a simple blog app, something similar for Go would be great</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Any resources on building a simple web app with Go without any frameworks?",
				"ups": 43,
				"upvote_ratio": 0.84,
				"url": "https://teddit.net/r/golang/comments/z4yoin/any_resources_on_building_a_simple_web_app_with/",
				"user_flair": ""
			},
			{
				"author": "nmezhenskyi",
				"created": 1669471575,
				"domain": "self.golang",
				"duration": null,
				"id": "z58ce5",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">show & tell</span>",
				"link_flair_text": "show & tell",
				"locked": false,
				"media": null,
				"num_comments": 0,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z58ce5/rcs_a_cache_server_with_native_support_of_http/",
				"score": 5,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Lately I&#39;ve been writing a cache server in Go out of curiousity. It&#39;s still in early stages but the skeleton is ready.</p>\n\n<p>In its current state, RCS uses in-memory hash table that stores binary data. It exposes three APIs: native one (based on top of TCP/IP), HTTP, and gRPC. The reason I made it that way is because one time I wanted to interact with Redis using HTTP requests but Redis didn&#39;t support it natively, so I had to use a third-party lib. Then, I figured it&#39;d be a fun project to write a cache server that supports multiple APIs.</p>\n\n<p>I have some more features planned like WebSocket support, possibly attaching authentication so that it could be used like a self-hosted Redis cloud, etc. The core in-memory cache definitely needs improvements too.</p>\n\n<p>Now I&#39;m curious whether someone would find the idea useful or not really. What&#39;s your opinion on this?</p>\n\n<p>Here&#39;s the repo: <a href=\"https://github.com/nmezhenskyi/rcs\">https://github.com/nmezhenskyi/rcs</a></p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "RCS - a cache server with native support of HTTP & gRPC",
				"ups": 5,
				"upvote_ratio": 0.78,
				"url": "https://teddit.net/r/golang/comments/z58ce5/rcs_a_cache_server_with_native_support_of_http/",
				"user_flair": ""
			},
			{
				"author": "geek_marvin",
				"created": 1669492681,
				"domain": "medium.com",
				"duration": null,
				"id": "z5gcuc",
				"images": {
					"preview": "/pics/w:null_4-7GhzFB3Fpt13qOz8at5k7CB8-xVWgvZjayHy7rMgI.jpg",
					"thumb": "https://teddit.net/pics/thumbs/thumb_w:108_4-7GhzFB3Fpt13qOz8at5k7CB8-xVWgvZjayHy7rMgI.jpg"
				},
				"is_self_link": false,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 0,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5gcuc/how_to_create_publish_a_go_public_package/",
				"score": 2,
				"selftext_html": null,
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "How To Create & Publish a Go Public Package",
				"ups": 2,
				"upvote_ratio": 0.67,
				"url": "https://medium.com/the-godev-corner/how-to-create-publish-a-go-public-package-9034e6bfe4a9",
				"user_flair": ""
			},
			{
				"author": "sergiomomos",
				"created": 1669458716,
				"domain": "self.golang",
				"duration": null,
				"id": "z54fhk",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 10,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z54fhk/jql_in_go/",
				"score": 10,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Can someone point me in the right direction on how to write something similar to the jira query language in go?\nI would like to convert a string having a grammar similar to JQL to a SQL expression.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "JQL in go",
				"ups": 10,
				"upvote_ratio": 0.81,
				"url": "https://teddit.net/r/golang/comments/z54fhk/jql_in_go/",
				"user_flair": ""
			},
			{
				"author": "Arthex56",
				"created": 1669447478,
				"domain": "self.golang",
				"duration": null,
				"id": "z51a46",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">help</span>",
				"link_flair_text": "help",
				"locked": false,
				"media": null,
				"num_comments": 24,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z51a46/optional_function_parameters_and_generics_for/",
				"score": 12,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>The title says it all. Why can&#39;t I use generics in struct methods, though I know Language designers decided to not implement optional parameters, is there any other way to achieve it?</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Optional Function Parameters and Generics for Struct Methods",
				"ups": 12,
				"upvote_ratio": 0.77,
				"url": "https://teddit.net/r/golang/comments/z51a46/optional_function_parameters_and_generics_for/",
				"user_flair": ""
			},
			{
				"author": "newerprofile",
				"created": 1669493938,
				"domain": "self.golang",
				"duration": null,
				"id": "z5guqi",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 1,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5guqi/what_is_this_pattern_called/",
				"score": 1,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I don&#39;t know if this is specific to golang, but whenever I randomly browse go projects on github, I stumble upon this structure lots of times.</p>\n\n<p>Basically, the project is structure in the way where it has a centralized package that contains lots of interfaces. This interface implements lots of different usecases along with their respective methods.</p>\n\n<p>And, then, each of those usecases are separated in different files. The usecases will have a struct which consists of the dependencies and also the associated methods. They also will have a function which always starts with a word &quot;New...&quot;. It accepts the dependencies as the parameters and the returns the struct populated with the said dependencies.</p>\n\n<p>This is roughly how it looks like.</p>\n\n<p>```go\n// usecase.go\npackage service</p>\n\n<p>type UserUsecase interface {\n  GetUser(ctx context.Context, userID int64) (err error)\n}</p>\n\n<p>type ActivityUsecase interfaces {\n  GetActivityByUserID(ctx context.Context, userID int64) (err error)\n}\n```</p>\n\n<p>```go\n// user.impl.go\npackage usecase</p>\n\n<p>type UserUsecase struct {\n  ActivtyUsecase service.ActivityUsecase\n}</p>\n\n<p>func NewUserUsecase(activityUsecase service.ActivityUsecase) UserUsecase {\n  ActivityUsecase: activityUsecase,\n}</p>\n\n<p>func (uu UserUsecase) GetUser(ctx context.Context, userID int64) (err error) {\n  // do something\n  return\n}\n```</p>\n\n<p>Anyone can tell me what this structure is called and the anatomy of each of them? Why is it so common to use?</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "What is this \"pattern\" called?",
				"ups": 1,
				"upvote_ratio": 0.67,
				"url": "https://teddit.net/r/golang/comments/z5guqi/what_is_this_pattern_called/",
				"user_flair": ""
			},
			{
				"author": "Putrid_Doctor_435",
				"created": 1669487096,
				"domain": "self.golang",
				"duration": null,
				"id": "z5e85a",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 1,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5e85a/where_do_i_go_next/",
				"score": 1,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Hello Guys,</p>\n\n<p>I just started learning Golang after using python for sometime. Im am very confident with the basics but where do I go from there?. I used a tutorial to learn how to create a rest api and connect it to a local MySQL server but i didn&#39;t actually understand what was going on, and advice or links to resources that can help me get better? Thanks</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Where Do I Go Next?",
				"ups": 1,
				"upvote_ratio": 0.67,
				"url": "https://teddit.net/r/golang/comments/z5e85a/where_do_i_go_next/",
				"user_flair": ""
			},
			{
				"author": "WrongJudgment6",
				"created": 1669482703,
				"domain": "self.golang",
				"duration": null,
				"id": "z5ci8g",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 0,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5ci8g/any_book_on_mechanical_sympathy_worth_it/",
				"score": 1,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Noticed a trend on books relating to mechanical sympathy or data oriented programming and Go.</p>\n\n<p>Are there any that people recommend?</p>\n\n<p>The ones that I remember\n* Data Oriented Programming\n* Efficient Go\n* 100 Go Mistakes and How to Avoid Them</p>\n\n<p>Maybe more.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Any book on Mechanical Sympathy worth it?",
				"ups": 1,
				"upvote_ratio": 1,
				"url": "https://teddit.net/r/golang/comments/z5ci8g/any_book_on_mechanical_sympathy_worth_it/",
				"user_flair": ""
			},
			{
				"author": "saltyrefrigerator",
				"created": 1669478904,
				"domain": "self.golang",
				"duration": null,
				"id": "z5b13r",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">help</span>",
				"link_flair_text": "help",
				"locked": false,
				"media": null,
				"num_comments": 11,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5b13r/retry_requests_resulting_in_500/",
				"score": 0,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I have a small microservice written in go that works really well, but sometimes, an internal error occurs resulting in a 500 (most often when a pgx database pool connection is dropped).</p>\n\n<p>I’d like to retry these requests internally without the client having to retry. This means holding open the existing request/connection while we retry internally.</p>\n\n<p>My current idea is to build a reverse proxy that sits in front of the API in the same codebase and, if it receives a 500, clone &amp; retry the request.</p>\n\n<p>Is this a good idea? How else would you implement it?</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Retry requests resulting in 500?",
				"ups": 0,
				"upvote_ratio": 0.5,
				"url": "https://teddit.net/r/golang/comments/z5b13r/retry_requests_resulting_in_500/",
				"user_flair": ""
			},
			{
				"author": "usb3vehicleofdeath",
				"created": 1669477889,
				"domain": "self.golang",
				"duration": null,
				"id": "z5an42",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">show & tell</span>",
				"link_flair_text": "show & tell",
				"locked": false,
				"media": null,
				"num_comments": 0,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5an42/datayoinker_a_selfhosted_alternative_to_dweetio/",
				"score": 0,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I discovered dweet while playing around with making a DIY temperature monitoring system for my room. When using it I wasn&#39;t satisfied with the low amount of dweets I could store so I decided I could make my own version that worked for my use case and didn&#39;t have storage limitations.</p>\n\n<p>I&#39;m happy to present <a href=\"https://gitlab.com/insanitywholesale/datayoinker\">DataYoinker</a>!</p>\n\n<p>It took a while and at some point I forgot I even had the project but right now it&#39;s at a point where I&#39;m mostly happy with it.<br/>\nThe main points are:<br/>\n- simple SQLite database but using the modernc library to avoid CGo<br/>\n- a more normal REST API in addition to a HAPI one<br/>\n- doesn&#39;t require HTTPS by default so it&#39;s suitable for use by microcontrollers</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Datayoinker: a self-hosted alternative to dweet.io",
				"ups": 0,
				"upvote_ratio": 0.5,
				"url": "https://teddit.net/r/golang/comments/z5an42/datayoinker_a_selfhosted_alternative_to_dweetio/",
				"user_flair": ""
			},
			{
				"author": "ChristophBerger",
				"created": 1669376794,
				"domain": "self.golang",
				"duration": null,
				"id": "z4bg24",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 136,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4bg24/using_rust_at_a_startup_a_cautionary_tale/",
				"score": 175,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>An interesting article about Rust and Go: <a href=\"https://mdwdotla.medium.com/using-rust-at-a-startup-a-cautionary-tale-42ab823d9454\">Using Rust at a startup: A cautionary tale | by Matt Welsh | Nov, 2022 | Medium</a>.</p>\n\n<p>No, this is not a Rust-bashing article. The author has to say many good things about Rust but concludes that Rust is used in situations where it isn&#39;t a good fit.</p>\n\n<p>If you work with both languages, what is your experience with Go and Rust?</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Using Rust at a startup: A cautionary tale",
				"ups": 175,
				"upvote_ratio": 0.85,
				"url": "https://teddit.net/r/golang/comments/z4bg24/using_rust_at_a_startup_a_cautionary_tale/",
				"user_flair": ""
			},
			{
				"author": "airtrip2019",
				"created": 1669395414,
				"domain": "github.com",
				"duration": null,
				"id": "z4i783",
				"images": {
					"preview": "/pics/w:null_uKfmAoDJzG0pjh7aD8m1y2JDB3OO6aXNx3HnEblCels.jpg",
					"thumb": "https://teddit.net/pics/thumbs/thumb_w:108_uKfmAoDJzG0pjh7aD8m1y2JDB3OO6aXNx3HnEblCels.jpg"
				},
				"is_self_link": false,
				"is_video": false,
				"link_flair": "<span class=\"flair\">generics</span>",
				"link_flair_text": "generics",
				"locked": false,
				"media": null,
				"num_comments": 1,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4i783/generic_library_graph_v0150_has_been_released/",
				"score": 30,
				"selftext_html": null,
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Generic library: graph v0.15.0 has been released (with predefined error instances for fine-grained checks)",
				"ups": 30,
				"upvote_ratio": 0.89,
				"url": "https://github.com/dominikbraun/graph/tree/v0.15.0",
				"user_flair": ""
			},
			{
				"author": "DiamondDemon669",
				"created": 1669477588,
				"domain": "self.golang",
				"duration": null,
				"id": "z5aj25",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">newbie </span>",
				"link_flair_text": "newbie ",
				"locked": false,
				"media": null,
				"num_comments": 2,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z5aj25/export_method_of_a_type_to_c/",
				"score": 0,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>WARNING: I know nothing about go. proceed if you dare</p>\n\n<p>I want to export a package to C so I dont have to code in go anymore</p>\n\n<p>I changed all the package lines to <code>package main</code> but when I compiled there were no functions from the package</p>\n\n<p>But then I have something like this\n<code>go\nfunc (thing *Thing) foo(bar int) {\n    ...\n}\n</code>\nwhat //export comment do i put there?</p>\n\n<p>PS if someone could find a way to automate adding the export comments I would really appreciate that</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "export method of a type to C",
				"ups": 0,
				"upvote_ratio": 0.25,
				"url": "https://teddit.net/r/golang/comments/z5aj25/export_method_of_a_type_to_c/",
				"user_flair": ""
			},
			{
				"author": "BUGFIX-66",
				"created": 1669414376,
				"domain": "bugfix-66.com",
				"duration": null,
				"id": "z4pu8i",
				"images": null,
				"is_self_link": false,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 3,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4pu8i/code_to_circumvent_gos_memory_safety_allowing_the/",
				"score": 8,
				"selftext_html": null,
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Code to circumvent Go's memory safety, allowing the reading and writing of arbitrary memory addresses without the use of \"unsafe\"",
				"ups": 8,
				"upvote_ratio": 0.79,
				"url": "https://bugfix-66.com/142fe84d7400a941ca0a1122096aaa300347e9180f567e373f21a1f2d0d22617",
				"user_flair": ""
			},
			{
				"author": "Fueled_by_sugar",
				"created": 1669412288,
				"domain": "self.golang",
				"duration": null,
				"id": "z4ozml",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">help</span>",
				"link_flair_text": "help",
				"locked": false,
				"media": null,
				"num_comments": 13,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4ozml/how_do_i_gracefully_handle_both_a_program/",
				"score": 9,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I found a neat little snippet that allows me to listen for the interrupt signal coming from the command line and then gracefully let go of all my resources:</p>\n\n<pre><code>done := make(chan os.Signal, 1)\nsignal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)\n\n&lt;-done\ncloseResources()\n</code></pre>\n\n<p>But before that, my program starts two different things in two different goroutines:</p>\n\n<pre><code>wg := sync.WaitGroup{}\nwg.Add(1)\ngo func() {\n    startOneThing()\n    wg.Done()\n}()\n\nwg.Add(1)\ngo func() {\n    startAnotherThing()\n    wg.Done()\n}()\n</code></pre>\n\n<p>Before i brought the signal interruption thing into play, i used to be able to just do a nice <code>wg.Wait()</code> before i closed my resources, but now with both of these things here, i don&#39;t know how to consolidate things. How can i call my code that closes the resources when either of these two things occur (either the goroutines finish, or the program gets an interrupt signal)?</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "How do i gracefully handle both a program interrupt, and goroutines finishing?",
				"ups": 9,
				"upvote_ratio": 0.91,
				"url": "https://teddit.net/r/golang/comments/z4ozml/how_do_i_gracefully_handle_both_a_program/",
				"user_flair": ""
			},
			{
				"author": "newbee0010",
				"created": 1669381502,
				"domain": "self.golang",
				"duration": null,
				"id": "z4cxcy",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">help</span>",
				"link_flair_text": "help",
				"locked": false,
				"media": null,
				"num_comments": 8,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4cxcy/learning_about_concurrency/",
				"score": 32,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>What would you recommend if you were to learn everything about concurrency from scratch all the way to advanced topics?\nMay be some good resources that you know, or some classic academic or practical exercises.\nI&#39;m looking for something to learn about concurrency in depth supplemented by good exercises that are not very trivial.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Learning about concurrency",
				"ups": 32,
				"upvote_ratio": 0.92,
				"url": "https://teddit.net/r/golang/comments/z4cxcy/learning_about_concurrency/",
				"user_flair": ""
			},
			{
				"author": "0xjnml",
				"created": 1669388446,
				"domain": "modern-c.blogspot.com",
				"duration": null,
				"id": "z4fewp",
				"images": null,
				"is_self_link": false,
				"is_video": false,
				"link_flair": "<span class=\"flair\">show & tell</span>",
				"link_flair_text": "show & tell",
				"locked": false,
				"media": null,
				"num_comments": 1,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4fewp/producing_a_go_parser_from_the_language/",
				"score": 14,
				"selftext_html": null,
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Producing a Go parser from the language specification mechanically, mostly",
				"ups": 14,
				"upvote_ratio": 0.9,
				"url": "https://modern-c.blogspot.com/2022/11/producing-go-parser-from-language.html",
				"user_flair": ""
			},
			{
				"author": "tomcam",
				"created": 1669416057,
				"domain": "self.golang",
				"duration": null,
				"id": "z4qivq",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 5,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4qivq/dumb_idea_for_testing_output_of_a_static_site/",
				"score": 2,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Am creating a Markdown to HTML static site generator and would like input on tests. All the heavy lifting has been done by the incredible Goldmark parser, which has its own tests. I am adding extensive theme support. For example, you might use a theme comprised of stylesheets and static assets, then use the front matter to override a single element--changing the h1 to blue from black, let&#39;s say.</p>\n\n<p>To see if that override works, DOM inspection is required. Playwright was recommended to me. While building up tests I realized I could just put those tests right on the output HTML page itself: the output file would use Javascript to inspect the DOM and ensure that the h1 was properly blue after the override. This speeds up tests a lot.</p>\n\n<p>What if any would be the downsides to this approach.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Dumb idea for testing output of a static site generator: use on-page DOM inspection instead of playwright?",
				"ups": 2,
				"upvote_ratio": 0.67,
				"url": "https://teddit.net/r/golang/comments/z4qivq/dumb_idea_for_testing_output_of_a_static_site/",
				"user_flair": ""
			},
			{
				"author": "ali_ept",
				"created": 1669385546,
				"domain": "self.golang",
				"duration": null,
				"id": "z4ecah",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 11,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4ecah/is_todd_mcleod_good_for_learning_the_language/",
				"score": 11,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>I&#39;m searching for a good udemy course for learning the language.<br/>\nI need some recommendations.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Is Todd Mcleod good for learning the language?",
				"ups": 11,
				"upvote_ratio": 0.82,
				"url": "https://teddit.net/r/golang/comments/z4ecah/is_todd_mcleod_good_for_learning_the_language/",
				"user_flair": ""
			},
			{
				"author": "pinpinbo",
				"created": 1669316975,
				"domain": "self.golang",
				"duration": null,
				"id": "z3s2yb",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "<span class=\"flair\">discussion</span>",
				"link_flair_text": "discussion",
				"locked": false,
				"media": null,
				"num_comments": 147,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z3s2yb/after_using_go_for_so_long_and_moving_back_to_java/",
				"score": 248,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>FML.</p>\n\n<p>The standard library is fine. Some of the low level libraries are fine. But people love shooting their own foot with massive frameworks that they don’t even understand.</p>\n\n<p>If you make your interface small and if you make your constructor accept the small interfaces, do you still need a DI framework? Fucking Guice creates more work than it saves.</p>\n\n<p>If you have small interfaces, do you even need a mocking library? Just create a test class as the second implementation by saving to hashmap.</p>\n\n<p>In an alternate timeline, Java could have been so normal like other languages.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "After using Go for so long and moving back to Java…",
				"ups": 248,
				"upvote_ratio": 0.88,
				"url": "https://teddit.net/r/golang/comments/z3s2yb/after_using_go_for_so_long_and_moving_back_to_java/",
				"user_flair": ""
			},
			{
				"author": "Outrageous_Big_2053",
				"created": 1669375340,
				"domain": "dev.to",
				"duration": null,
				"id": "z4b0zs",
				"images": {
					"preview": "/pics/w:null_0CZMoxjxpAU3CkojGd5vy-iv4XtaW6SYr5erZNgnKOk.jpg",
					"thumb": "https://teddit.net/pics/thumbs/thumb_w:108_0CZMoxjxpAU3CkojGd5vy-iv4XtaW6SYr5erZNgnKOk.jpg"
				},
				"is_self_link": false,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 0,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4b0zs/web_reverse_proxy_practices_for_beginners/",
				"score": 12,
				"selftext_html": null,
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Web Reverse Proxy Practices for Beginners",
				"ups": 12,
				"upvote_ratio": 0.77,
				"url": "https://dev.to/llance_24/golang-reverse-proxy-practices-36od",
				"user_flair": ""
			},
			{
				"author": "mmparody",
				"created": 1669406247,
				"domain": "self.golang",
				"duration": null,
				"id": "z4mkf8",
				"images": null,
				"is_self_link": true,
				"is_video": false,
				"link_flair": "",
				"link_flair_text": null,
				"locked": false,
				"media": null,
				"num_comments": 9,
				"over_18": false,
				"permalink": "https://teddit.net/r/golang/comments/z4mkf8/advanced_book_golang_with_databases/",
				"score": 2,
				"selftext_html": "<!-- SC_OFF --><div class=\"md\"><p>Which advanced book on golang do you recommend, especially if it contains programming with databases.</p>\n</div><!-- SC_ON -->",
				"stickied": false,
				"subreddit": "golang",
				"subreddit_front": null,
				"title": "Advanced book Golang with databases",
				"ups": 2,
				"upvote_ratio": 0.57,
				"url": "https://teddit.net/r/golang/comments/z4mkf8/advanced_book_golang_with_databases/",
				"user_flair": ""
			}
		]
	},
	"error": ""
}
